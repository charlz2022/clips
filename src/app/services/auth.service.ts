import { Injectable } from '@angular/core';
import { AngularFireAuth } from '@angular/fire/compat/auth';
import { AngularFirestore, AngularFirestoreCollection } from '@angular/fire/compat/firestore';
import { ActivatedRoute, NavigationEnd, Router } from '@angular/router';
import { delay, filter, map, Observable, switchMap, of } from 'rxjs';
import IUser from '../models/user.model';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  private userCollection: AngularFirestoreCollection<IUser>
  // The <var_name>$ is am Observable property.
  public isAuthenticated$: Observable<boolean>
  public isAuthenticatedWithDelay$: Observable<boolean>
  private redirect = false

  constructor(
    private auth: AngularFireAuth,
    private db: AngularFirestore,
    private router: Router,
    private route: ActivatedRoute      
  ) {
      // This initialize the db collection w/ firestore collection.
      this.userCollection = db.collection('users')
      // Checked if user exists on Firebase
      this.isAuthenticated$ = auth.user.pipe(
        map(user => !!user)
      )

      // If user authentication is successful, we have to add a delay
      // for 1000 milliseconds to do the next transactions.
      this.isAuthenticatedWithDelay$ = this.isAuthenticated$.pipe(
        delay(1000)
      )

      this.router.events.pipe(
        // filter use to select only specific class like NavigationEnd
        filter(e => e instanceof NavigationEnd),
        map(e => this.route.firstChild),
        switchMap(route => route?.data ?? of({})) // ?? is a nullish coalescing operator
      ).subscribe(data => {
          this.redirect = data['authOnly'] ?? false
      })
    }

  public async createUser(userData: IUser) {
    // This check if the password is empty.
    if(!userData.password) {
      throw new Error("Password not provided!")
    }

    // Prepare for user registration to Firebase.
    const userCred = this.auth.createUserWithEmailAndPassword(
      userData.email as string, userData.password as string
    )

    // Check the firebase userid if its empty
    if(!(await userCred).user) {
      throw new Error("User can't be found.")
    }

    // This will create a collection in Firestore,
    // password is not included because its already
    // stored in Firebase authentication.
    // .doc() function save the uid generated byt FIrebase to Firestore collection.
    await this.userCollection.doc((await userCred).user?.uid).set({
      name: userData.name,
      email: userData.email,
      age: userData.age,
      phoneNumber: userData.phoneNumber
    })    

    // This .update() update the Firebase profile
    // It contains 2 objects w/c are name and profile pic.
    ;(await userCred).user?.updateProfile({
      displayName: userData.name
    })
  }

  public async logout($event?: Event): Promise<void> {
    if($event) {
      $event.preventDefault()
    }
    
    // Firebase signout method
    await this.auth.signOut()

    if(this.redirect) {
      // After clicking logout, it will redirect to homepage.
      await this.router.navigateByUrl("/")
    }
  }  
}
